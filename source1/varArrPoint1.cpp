/*
 * @Desccription: 
 * @version: 
 * @company: zy
 * @Author: Mark
 * @Date: 2020-12-10 16:22:08
 * @ListenEditors: Mark
 * @LastEditTime: 2020-12-10 17:07:16
 */

/*
  C++ 指针:
  1、通过指针，
     A） 可以简化一些C++编程任务的执行
     B） 还有一些任务，如{动态内存分配}，没有指针是无法执行的。
  2、如所知
     A) 每一个变量都有一个内存位置，每一个内存位置都定义了{可使用连字号(&)运算符访问的地址}，它表示了在内存中的一个{地址}。
*/

#include <iostream>
using namespace std;

int main()
{
    int var1;
    char var2[10];

    cout << "var1 变量的地址:";
    cout << &var1 << endl;

    cout << "var2 变量的地址:";
    cout << &var2 << endl;

    return 0;

}

/*
    1、什么是指针?
      A）指针是一个变量，其值为另一个变量的地址，即，{内存位置的地址}。
      B）就像其他变量或常量一样，您必须在{使用指针存储}其他变量地址之前，对其进行声明。
           type *var-name;
        在这里，
           B1） {type}是指针的基本类型，它必须是一个有效的C++数据类型
           B2） {var-name}是指针变量的名称。用来声明指针的{星号*}与 {乘法中使用的星号}是相同的。但是，在这个语句中，{星号是用来指定一个变量是指针}

        int   *ip;    //一个整型的指针
        double *dp;   //一个double型的指针
        float  *fp;   //一个浮点型指针
        char   *ch;   //一个字符型指针

      C） 所有指针的值的实际数据类型，不管是 1、整型, 2、浮点型, 3、字符型、4、还是其他的数据类型，都是一样的。都是一个代表{内存地址的长的十六进制数}
        不同数据类型的指针之间唯一的不同是，{指针所指向的变量或常量的数据类型不同}

*/