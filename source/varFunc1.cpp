/*
 * @Desccription: 
 * @version: 
 * @company: zy
 * @Author: Mark
 * @Date: 2020-12-09 21:46:33
 * @ListenEditors: Mark
 * @LastEditTime: 2020-12-10 12:30:27
 https://www.runoob.com/cplusplus/cpp-functions.html
 */

/*
    1、函数: 主函数main()&&非主函数
    2、函数声明:告诉编译器函数的名称、返回类型和参数。
    3、函数定义:提供了函数的主体
    4、strcat() 连接两个字符串、memcpy()用来复制内存到另一个位置

    5、函数组成: {函数头}+{函数主体}组成
       5.1) 返回类型:  return_type[函数返回的值的数据类型]，有些函数执行所需的操作而不返回值，在这种情况下，return_type是关键字[void]
       5.2) 函数名称:  这些函数的实际名称。函数名和参数列表一起构成了函数签名。
       5.3) 参数:      参数就像是占位符。当函数调用时，您向参数传递一个值，这个值被成为[实际参数]。参数列表包含函数参数的类型、顺序、数量。
                       [参数]是可选的，也就是说，函数可能不包含参数。
       5.4) 函数主体: 函数主体包含一组[定义函数]执行任务语句
*/

# include<iostream>
using namespace std;

// 函数声明
int max(int num1, int num2);

int main()
{
    // 局部变量声明
    int a = 100;
    int b = 200;
    int ret;
    // 调用函数来获取最大值
    ret = max(a, b);
    cout << "Max value is: " << ret << endl;
    return 0;
}

//  函数返回两个数中较大的那个数
int max(int num1, int num2)
{
    // 局部变量声明
    int result;

    if (num1 > num2)
        result = num1;
    else
        result = num2;
    return result;
}

/*
    1、函数参数
       A) 如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的[形式参数]
       B) 形式参数就像函数内的[其他局部变量]，在进入函数时[被创建], 退出函数时[被销毁]
    2、函数调用时,有三种向函数传递参数的形式
       2.1) 传值调用: 该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的[形式参数]对实际参数没有影响。 

       2.2) 指针调用: 该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改[形式
                    参数]会影响[实际参数]

       2.3) 引用调用: 该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改[形式
                    参数]会影响[实际参数]
                    
       2.4） 参数默认值: 当您定义一个函数，您可以为[参数列表中后边的每一个参数指定默认值]。当调用函数时，如果实际参数的值留空，则使用这个默认值.
                      这是通过在函数定义中使用[赋值运算符来为参数赋值]的。调用函数时，如果未传递参数的值，则会使用默认值，如果指定了值，则会忽略默认值，
                      使用传递的值。
*/

